{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"miracle-wm","text":""},{"location":"#about","title":"About","text":"<p>miracle-wm is a Wayland compositor based on Mir. It features a tiling window manager at its core, very much in the style of i3 and sway. The intention is to build a compositor that is flashier and more feature-rich than either of those compositors, like swayfx.</p> <p>See the installation guide for installation instructions on your platform.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>A tiling window manager, similar to <code>i3</code> and <code>sway</code><ul> <li>Built-in support for inner/outer gaps</li> </ul> </li> <li>An optional floating window manager for individual windows</li> <li>A YAML configuration file</li> <li>Support for the following wayland protocols:<ul> <li>ext_session_lock_manager_v1</li> <li>mir_shell_v1</li> <li>wl_shell</li> <li>xdg_wm_base</li> <li>zwlr_foreign_toplevel_manager_v1</li> <li>zwlr_layer_shell_v1</li> <li>zwlr_screencopy_manager_v1</li> <li>zwlr_virtual_pointer_manager_v1</li> <li>zwp_input_method_manager_v2</li> <li>zwp_text_input_manager_v1</li> <li>zwp_text_input_manager_v2</li> <li>zwp_text_input_manager_v3</li> <li>zwp_virtual_keyboard_manager_v1</li> <li>zxdg_output_manager_v1</li> <li>zxdg_shell_v6</li> <li>zwp_idle_inhibit_manager_v1</li> <li>zwp_input_method_v1</li> <li>zwp_input_panel_v1</li> <li>zwp_pointer_constraints_v1</li> <li>zwp_primary_selection_device_manager_v1</li> <li>zwp_relative_pointer_manager_v1</li> </ul> </li> <li>Support for a wide array of graphics cards, including hybrid systems and outputs driven by Nvidia's proprietary drivers</li> <li>Workspace support</li> <li>Growing support for <code>i3</code>/<code>sway</code> IPC<ul> <li>A minimal implementation for <code>waybar</code> at the moment</li> </ul> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Github Repository</li> <li>Snapcraft.io listing</li> <li>Mir, the library that <code>miracle-wm</code> uses for all of the heavy-lifting</li> <li>Miriway, another compositor built on top of Mir</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The goal is to have an environment that I am comfortable daily-driving by July 2024. This goal will be marked by the <code>1.0.0</code> release. Until then, all releases will be <code>0.x.0</code>.</p> <p>The dates attached to these releases aren't set in stone. Any release may come earlier if the work is done. Also, new features may be added to the release while it's in progress if priority changes, which may push back the release date.</p>"},{"location":"roadmap/#010","title":"\u2705 0.1.0","text":"<p>Proof of Concept (Due: February 17th)</p> <p>Features:</p> <ul> <li> Window management<ul> <li> Layout of new windows</li> <li> Delete window</li> <li> Resizing windows</li> <li> Gaps in windows</li> <li> Account for minimum sizes on windows (e.g. gedit)</li> <li> Handle exclusion zones</li> <li> Handle fullscreen windows</li> </ul> </li> <li> Navigation<ul> <li> Changing selected window with keyboard</li> <li> Moving window with keyboard shortcuts</li> </ul> </li> <li> Outputs<ul> <li> Output creation</li> <li> Output updating</li> <li> output deletion</li> </ul> </li> <li> Application quit command</li> <li> Workspaces<ul> <li> Workspace switching</li> <li> Moving windows between workspaces</li> </ul> </li> <li> Configuration<ul> <li> Gap size</li> <li> Action key</li> <li> Startup apps</li> <li> Startup apps</li> <li> Override default keybindings</li> <li> Custom keybindings</li> </ul> </li> </ul>"},{"location":"roadmap/#020","title":"\ud83d\udea7 0.2.0","text":"<p>Stabilization + Usability (Due: April 15th)</p> <p>Features:</p> <ul> <li> Major bugs + performance<ul> <li> No crashes after a week of daily-driving</li> </ul> </li> <li> Configuration<ul> <li> Hot reloading</li> <li> Resize jump</li> <li> Outer gaps</li> </ul> </li> <li> Floating windows<ul> <li> Floating window support (pop out of/into tiles, resizing, moving)</li> <li> \"Pin to workspace\" mode</li> </ul> </li> <li> I3 IPC support for workspaces</li> <li> Multi monitor support<ul> <li> Zero monitors</li> </ul> </li> <li> Packaging<ul> <li> Deb (jammy, mantic, noble, multi-architecture)</li> <li> Fedora</li> <li> Arch</li> </ul> </li> </ul>"},{"location":"roadmap/#030","title":"0.3.0","text":"<p>Pre 1.0.0 Release (Due: June 1st)</p> <p>This release relies on having the Mir's renderer capabilities opened up to us. If we can override the renderer, we can put whatever we like on the screen.</p> <p>Features:</p> <ul> <li> Configuration<ul> <li> Display configuration (depends on https://github.com/mattkae/miracle-wm/issues/93)</li> </ul> </li> <li> Full I3 IPC integration</li> <li> Highlight border around selected window (carry over from 0.2.0)</li> <li> Animation (requires access to Mir renderer)<ul> <li> Window movement interpolation</li> <li> Window size interpolation</li> <li> Workspace change</li> <li> Move window to workspace</li> <li> Opening</li> <li> Closing</li> <li> Configuration support</li> </ul> </li> <li> Stacking windows</li> </ul>"},{"location":"roadmap/#100","title":"1.0.0","text":"<p>Official Release (Due July 15th)</p> <p>Features:</p> <ul> <li> Bug free</li> <li> IDEA: Workspace/window overview view (similar to GNOME)</li> <li> IDEA: Settings app</li> <li> IDEA: Context menu on window with support for actions</li> <li> IDEA: Focus mode, where the focused application appears up front and center</li> <li> IDEA: \"Picture in picture\" mode (carry over from 0.2.0)</li> <li> IDEA: A minimal default shell, including a panel, launcher, background, etc.</li> </ul>"},{"location":"configuration/action_key/","title":"Action Key","text":"<p>The action key defines the primary key that will initiate a command in the compositor. Default Keybinds and Custom Actions can refer to this key using the word <code>primary</code> as a modifier key. Please see those configuration options for more info.</p>"},{"location":"configuration/action_key/#key","title":"Key","text":"<pre><code>action_key\n</code></pre>"},{"location":"configuration/action_key/#value","title":"Value","text":"<p>A <code>Modifier</code> string, which is defined as a name in the following table:</p> Name Description <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/action_key/#default","title":"Default","text":"<pre><code>meta\n</code></pre> <p>This is the <code>super</code> or <code>windows</code> key.</p>"},{"location":"configuration/action_key/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\naction_key: shift\n</code></pre>"},{"location":"configuration/custom_actions/","title":"Custom Actions","text":"<p>The user may define a list of custom actions, which are shell commands bound to a specific key combination. These actions always have preference over those defined in Default Keybinds when they are bound to the same key combination.</p>"},{"location":"configuration/custom_actions/#key","title":"Key","text":"<pre><code>custom_actions\n</code></pre>"},{"location":"configuration/custom_actions/#value","title":"Value","text":"<p>A list of: </p> <pre><code># The shell command that you want to execute\n- command: string\n\n# The key action that will trigger the default action\n - action: \"up\" | \"down\" | \"repeat\" | \"modifiers\"\n\n# A list of modifiers that need to accompany the action for the command to happen\n- modifiers: Modifier[]\n\n# Name of the keycode that the action should respond to.\n# See https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h\n# for the list of available keycodes (e.g. KEY_ENTER, KEY_Z, etc.)\n- key: KeyCodeName\n</code></pre> <p>A <code>Modifier</code> is defined as one of the following names:</p> Name Description <code>primary</code> the key defined by the Action Key <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/custom_actions/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ncustom_actions:           # Set meta + D to open wofi\n  - command: wofi --show=drun\n    action: down\n    modifiers:\n      - primary\n    key: KEY_D\n</code></pre>"},{"location":"configuration/default_keybinds/","title":"Default Keybinds","text":"<p>The compositors comes ships with a number of built-in commands. By default, these commands are bound to preset keybinds, but the user may change them to whatever they want. These commands may be overridden more than once and will respond to multiple key combinations as a result. Defining at least one override disables the default action.</p> <p>The default commands defined in the compositor are described in this table:</p> Name Description Keybind <code>terminal</code> Opens a new terminal <code>\u2756 Super + Enter</code> <code>request_vertical</code> Requests that the current window layout future windows vertially <code>\u2756 Super + v</code> <code>request_horizontal</code> Requests that the current window layout future windows horizontaly <code>\u2756 Super + h</code> <code>select_up</code> Select the window above currently selected window <code>\u2756 Super + \u2191</code> <code>select_down</code> Select the window above currently selected window <code>\u2756 Super + \u2193</code> <code>select_left</code> Select the window above currently selected window <code>\u2756 Super + \u2190</code> <code>select_right</code> Select the window above currently selected window <code>\u2756 Super + \u2192</code> <code>move_up</code> Move the currently selected window upwards <code>\u2756 Super + \u21e7 Shift + \u2191</code> <code>move_down</code> Move the currently selected window downwards <code>\u2756 Super + \u21e7 Shift + \u2193</code> <code>move_left</code> Move the currently selected window to the left <code>\u2756 Super + \u21e7 Shift + \u2190</code> <code>move_right</code> Move the currently selected window to the right <code>\u2756 Super + \u21e7 Shift + \u2192</code> <code>toggle_resize</code> Toggle resize mode on the active window <code>\u2756 Super + r</code> <code>resize_up</code> When resize mode is toggled on, this will decrease the size of the window vertically <code>\u2756 Super + \u2191</code> (only in resize mode) <code>resize_down</code> When resize mode is toggled on, this will increase the size of the window vertically <code>\u2756 Super + \u2193</code> (only in resize mode) <code>resize_left</code> When resize mode is toggled on, this will decrease the size of the window horizontally <code>\u2756 Super + \u2190</code> (only in resize mode) <code>resize_down</code> When resize mode is toggled on, this will increase the size of the window horizontally <code>\u2756 Super + \u2192</code> (only in resize mode) <code>fullscreen</code> Fullscreen the currently selected window <code>\u2756 Super + f</code> <code>quit_active_window</code> Close the currently selected window <code>\u2756 Super + \u21e7 Shift + Q</code> <code>quit_compostior</code> Exit the compositor <code>\u2756 Super + \u21e7 Shift + E</code> <code>select_workspace_[0-9]</code> Select the workspace between 0-9 <code>\u2756 Super + [0-9]</code> <code>select_workspace_[0-9]</code> Move the currently selected window to the workspace between 0-9 <code>\u2756 Super + \u21e7 Shift + [0-9]</code> <code>toggle_floating</code> Toggle whether or not the currently selected window is floating <code>\u2756 Super + Space</code> <code>toggle_pinned_to_workspace</code> Toggle whether a floating window is pinned outside of a workspace or not <code>\u2756 Super + \u21e7 Shift + P</code>"},{"location":"configuration/default_keybinds/#key","title":"Key","text":"<pre><code>default_action_overrides\n</code></pre>"},{"location":"configuration/default_keybinds/#value","title":"Value","text":"<p>A list of: </p> <pre><code># The name of the action that you want to override (taken from the list above)\n- name: string\n\n# The key action that will trigger the default action\n - action: \"up\" | \"down\" | \"repeat\" | \"modifiers\"\n\n# A list of modifiers that need to accompany the action for the command to happen\n- modifiers: Modifier[]\n\n# Name of the keycode that the action should respond to.\n# See https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h\n# for the list of available keycodes (e.g. KEY_ENTER, KEY_Z, etc.)\n- key: KeyCodeName\n</code></pre> <p>A <code>Modifier</code> is defined as one of the following names:</p> Name Description <code>primary</code> the key defined by the Action Key <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/default_keybinds/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ndefault_action_overrides:\n  - name: terminal        # Override the \"terminal\" keybind to execute with \"Ctrl + Shift + Enter\"\n    action: down\n    modifiers:\n      - ctrl\n      - shift\n    key: KEY_ENTER\n</code></pre>"},{"location":"configuration/display_configuration/","title":"Display Configuration","text":"<p>Please note that the display configuration **is distinct from the configuration defined in the configuration section. The two may indeed overlap with one another. There is a task in miracle-wm to fix this.</p> <p>The Mir project provides a mechanism for configuring the display in a reproducible way. To use this, you may provide the following commandline argument when running miracle:</p> <pre><code>--display-config=static=/path/to/a/display/file.yaml\n</code></pre> <p>Alternatively, you may define the <code>display-config</code> option in Mir's Built-in Configuration, e.g.:</p> <pre><code># ~/.config/miracle-wm.config\n\ndisplay-config=static=/path/to/a/display/file.yaml\n</code></pre>"},{"location":"configuration/environment_variables/","title":"Environment Variables","text":"<p>A list of environment variables that are set when the compositor starts.</p>"},{"location":"configuration/environment_variables/#key","title":"Key","text":"<pre><code>environment_variables\n</code></pre>"},{"location":"configuration/environment_variables/#value","title":"Value","text":"<p>A list of:</p> <pre><code>- key: string\n- value: any\n</code></pre>"},{"location":"configuration/environment_variables/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nenvironment_variables:\n  - key: mesa_glthread  # Setting mesa_glthread to false fixes some AMD issues\n    value: false\n</code></pre>"},{"location":"configuration/file/","title":"File","text":"<p>The configuration file will be written blank the first time that you start the compositor. The file is named miracle-wm.yaml and it is written to your config directory, most likely at:</p> <pre><code>~/.config/miracle-wm.yaml.\n</code></pre> <p>The configuration is in the <code>YAML</code> file format.</p>"},{"location":"configuration/inner_gaps/","title":"Inner Gaps","text":"<p>Gaps between windows in pixels.</p>"},{"location":"configuration/inner_gaps/#key","title":"Key","text":"<pre><code>inner_gaps\n</code></pre>"},{"location":"configuration/inner_gaps/#value","title":"Value","text":"<p>A 2D integer point describing the gaps in pixels in the X and Y directions: <pre><code>x: int\ny: int\n</code></pre></p>"},{"location":"configuration/inner_gaps/#default","title":"Default","text":"<pre><code>x: 10\ny: 10\n</code></pre>"},{"location":"configuration/inner_gaps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ninner_gaps:\n    x: 50 # 50px between windows horizontally\n    y: 20 # 20px between windows vertically\n</code></pre>"},{"location":"configuration/mir/","title":"Mir's Built-in Configuration","text":"<p>Please note that Mir's built-in configuration **is distinct from the configuration defined in the configuration section. The two may indeed overlap with one another. There is a task in miracle-wm to fix this.</p> <p>Mir provides a built-in configuration on top of the one that miracle-wm defines.</p>"},{"location":"configuration/mir/#location","title":"Location","text":"<p>This file can be found at:</p> <pre><code>.config/miracle-wm.config\n</code></pre> <p>or at <code>$XDG_CONFIG_HOME/miracle-wm.config</code> if <code>$XDG_CONFIG_HOME</code> is defined.</p>"},{"location":"configuration/mir/#format","title":"Format","text":"<p>This configuration is in a typical key-value pair format, i.e.:</p> <pre><code>key=value\n</code></pre> <p>The list of valid <code>key</code>s can be found by running:</p> <pre><code>miracle-wm --help\n</code></pre> <p>The keys are the names of the commandline arguments</p>"},{"location":"configuration/mir/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.config\n\nx11-window-title=miracle-wm\nidle-timeout=600\ndisplay-config=sidebyside\nadd-wayland-extensions=zwp_idle_inhibit_manager_v1:zwp_input_method_v1\n</code></pre>"},{"location":"configuration/outer_gaps/","title":"Outer Gaps","text":"<p>Gaps between the window tiles and the edge of the screen.</p>"},{"location":"configuration/outer_gaps/#key","title":"Key","text":"<pre><code>outer_gaps\n</code></pre>"},{"location":"configuration/outer_gaps/#value","title":"Value","text":"<p>A 2D integer point describing the gaps in pixels in the X and Y directions: <pre><code>x: int\ny: int\n</code></pre></p>"},{"location":"configuration/outer_gaps/#default","title":"Default","text":"<pre><code>x: 10\ny: 10\n</code></pre>"},{"location":"configuration/outer_gaps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nouter_gaps:\n    x: 50  # 50px between the tiling grid and the edge of the output, horizontally\n    y: 100 # 100px between the tiling grid and the edge of the output, vertically \n</code></pre>"},{"location":"configuration/resize_jump/","title":"Resize Jump","text":"<p>Defines the number of pixels that a window will be resized by for each resize request. This value affects any direction (up, down, left, or right).</p>"},{"location":"configuration/resize_jump/#key","title":"Key","text":"<pre><code>resize_jump\n</code></pre>"},{"location":"configuration/resize_jump/#value","title":"Value","text":"<p>An integer describing the number of pixels</p>"},{"location":"configuration/resize_jump/#default","title":"Default","text":"<pre><code>50\n</code></pre>"},{"location":"configuration/resize_jump/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nresize_jump: 25 # Each resize will now add or remove 25px from the current window size\n</code></pre>"},{"location":"configuration/startup_apps/","title":"Startup Apps","text":"<p>A list of applications that will be started when the compositor starts.</p>"},{"location":"configuration/startup_apps/#key","title":"Key","text":"<pre><code>startup_apps\n</code></pre>"},{"location":"configuration/startup_apps/#value","title":"Value","text":"<p>A list of:</p> <pre><code>- command: string  # A shell command to be executed\n\n# If true, the application will automatically restart\n- restart_on_death: bool\n</code></pre>"},{"location":"configuration/startup_apps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\n# Start waybar and swaybg on startup\nstartup_apps:\n  - command: waybar\n    restart_on_death: true\n  - command: swaybg -i /path/to/my/image\n    restart_on_death: true\n</code></pre>"},{"location":"configuration/terminal/","title":"Terminal","text":"<p>Select which terminal will be opened by the <code>terminal</code> keybind (See Default Keybinds).</p>"},{"location":"configuration/terminal/#key","title":"Key","text":"<pre><code>terminal\n</code></pre>"},{"location":"configuration/terminal/#value","title":"Value","text":"<p>A string defining the terminal shell command</p>"},{"location":"configuration/terminal/#default","title":"Default","text":"<pre><code>miracle-mw-sensible-terminal\n</code></pre>"},{"location":"configuration/terminal/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nterminal: konsole # Set konsole as the default terminal\n</code></pre>"},{"location":"getting_started/building/","title":"Building","text":""},{"location":"getting_started/building/#dependencies","title":"Dependencies","text":"<ul> <li>cmake &gt;= 3.7</li> <li>gcc or clang with C++20 support</li> <li>miral &gt;= 6</li> <li>mir-graphics-drivers-desktop &gt;= 2.14</li> <li>mir-graphics-drivers-nvidia &gt;= 2.14 (NVIDIA Only)</li> <li>glib-2.0</li> <li>yaml-cpp</li> <li>libevdev</li> <li>nlohmann json &gt;= 3.2.0</li> <li>libnotify</li> <li>libxkbcommon-devel</li> </ul>"},{"location":"getting_started/building/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/mattkae/miracle-wm.git\ncd miracle-wm\n\ncmake -Bbuild\ncmake --build build\nWAYLAND_DISPLAY=wayland-98 ./build/bin/miracle-wm\n</code></pre>"},{"location":"getting_started/building/#snap","title":"Snap","text":"<pre><code>cd miracle-wm\nsnapcraft\nsudo snap install --dangerous --classic miracle-wm_*.snap\n</code></pre>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#install","title":"Install","text":"SnapFedoraUbuntu (mantic and noble)Nightly <pre><code>sudo snap install miracle-wm --classic\n</code></pre> <pre><code>sudo dnf install miracle-wm\n</code></pre> <pre><code>sudo add-apt-repository ppa:matthew-kosarek/miracle-wm\nsudo apt update\nsudo apt install miracle-wm\n</code></pre> <pre><code>sudo snap install miracle-wm --classic --edge\n</code></pre>"},{"location":"getting_started/installation/#running","title":"Running","text":""},{"location":"getting_started/installation/#on-login","title":"On login","text":"<p>Once installed, you may select the \"Miracle\" option from your display manager before you login (e.g. <code>gdm</code> or <code>lightdm</code>). In most environments, this presents itself as a little \"settings\" button after you select your name.</p> <p>Note that if you installed the snap, the option may read \"Miracle (snap)\" to distinguish it from the binary version.</p>"},{"location":"getting_started/installation/#hosted","title":"Hosted","text":"<p>To run the window manager as a window on your current desktop session, simply run:</p> <pre><code>WAYLAND_DISPLAY=wayland-98 miracle-wm\n</code></pre> <p>Note that this is only useful if you want to test-drive the window manager or do some development on it for yourself.</p>"}]}